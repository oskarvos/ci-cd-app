name: Java CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # –≠—Ç–∞–ø 1: –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build application
        run: mvn clean compile

      - name: Run unit tests
        run: mvn test

      - name: Run integration tests
        run: mvn verify

      - name: Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/surefire-reports/

      - name: Build JAR
        run: mvn package -DskipTests

      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: application-jar
          path: target/*.jar

  # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤)
  code-quality:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run SonarCloud analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # –≠—Ç–∞–ø 3: –î–µ–ø–ª–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
  deploy:
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: application-jar

      - name: List files
        run: ls -la

      - name: Simulate deployment
        run: |
          echo "üöÄ Deploying application..."
          echo "JAR file: $(ls *.jar)"
          echo "Deployment to production server completed!"

      - name: Send notification
        run: |
          echo "‚úÖ CI/CD Pipeline completed successfully!"
          echo "Application version: $(date +%Y%m%d-%H%M%S)"